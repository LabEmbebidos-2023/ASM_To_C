
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000444  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000444  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000878  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  000008b8  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005a34  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000045c  00000000  00000000  00025ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d1  00000000  00000000  00026345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  00026416  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00026486  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010fc2  00000000  00000000  000264c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014a8  00000000  00000000  00037488  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e4c9  00000000  00000000  00038930  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000258  00000000  00000000  000a6dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000444 	.word	0x00000444

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000444 	.word	0x00000444
 10c:	00000444 	.word	0x00000444
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	00000444 	.word	0x00000444
 1ac:	20000000 	.word	0x20000000
 1b0:	20000434 	.word	0x20000434
 1b4:	20000434 	.word	0x20000434
 1b8:	20000474 	.word	0x20000474
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	0000027d 	.word	0x0000027d
 1d8:	000001ed 	.word	0x000001ed

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <main>:
#include "sam.h"

#define PINCFG_CONFIG_VALUE 0b0000000

int main(void)
{
 1ec:	b510      	push	{r4, lr}
	SystemInit();
 1ee:	4b1d      	ldr	r3, [pc, #116]	; (264 <main+0x78>)
 1f0:	4798      	blx	r3
	
	PORT->Group[0].PINCFG[14].reg = PINCFG_CONFIG_VALUE;
 1f2:	4b1d      	ldr	r3, [pc, #116]	; (268 <main+0x7c>)
 1f4:	2200      	movs	r2, #0
 1f6:	214e      	movs	r1, #78	; 0x4e
 1f8:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].DIRSET.reg = PORT_PA17;
 1fa:	2180      	movs	r1, #128	; 0x80
 1fc:	0289      	lsls	r1, r1, #10
 1fe:	6099      	str	r1, [r3, #8]
	
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
 200:	491a      	ldr	r1, [pc, #104]	; (26c <main+0x80>)
 202:	6a08      	ldr	r0, [r1, #32]
 204:	2380      	movs	r3, #128	; 0x80
 206:	011b      	lsls	r3, r3, #4
 208:	4303      	orrs	r3, r0
 20a:	620b      	str	r3, [r1, #32]
	
	GCLK->GENDIV.reg = 0x00;
 20c:	4b18      	ldr	r3, [pc, #96]	; (270 <main+0x84>)
 20e:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg = 0x10600;
 210:	2183      	movs	r1, #131	; 0x83
 212:	0249      	lsls	r1, r1, #9
 214:	6059      	str	r1, [r3, #4]
	GCLK->CLKCTRL.reg = 0x401B;
 216:	4917      	ldr	r1, [pc, #92]	; (274 <main+0x88>)
 218:	8059      	strh	r1, [r3, #2]
	
	
	TC3->COUNT16.COUNT.reg = 65307;
 21a:	4b17      	ldr	r3, [pc, #92]	; (278 <main+0x8c>)
 21c:	21e5      	movs	r1, #229	; 0xe5
 21e:	4249      	negs	r1, r1
 220:	8219      	strh	r1, [r3, #16]
	TC3->COUNT16.CTRLA.reg = 0x00 | TC_CTRLA_PRESCALER_DIV1024;
 222:	21e0      	movs	r1, #224	; 0xe0
 224:	00c9      	lsls	r1, r1, #3
 226:	8019      	strh	r1, [r3, #0]
	TC3->COUNT16.CTRLBSET.reg = 0x00;
 228:	715a      	strb	r2, [r3, #5]
	TC3->COUNT16.INTFLAG.reg = 0x01;
 22a:	3201      	adds	r2, #1
 22c:	739a      	strb	r2, [r3, #14]
	
	const unsigned int CTRLA_VALUE = TC3->COUNT16.CTRLA.reg;
 22e:	881a      	ldrh	r2, [r3, #0]
	TC3->COUNT16.CTRLA.reg = CTRLA_VALUE | 0x02;
 230:	2102      	movs	r1, #2
 232:	430a      	orrs	r2, r1
 234:	b292      	uxth	r2, r2
 236:	801a      	strh	r2, [r3, #0]
	
	const unsigned int MASK = 0x80;
	
	while(1) {
		const unsigned STATUS = TC3->COUNT16.STATUS.reg;
 238:	4b0f      	ldr	r3, [pc, #60]	; (278 <main+0x8c>)
 23a:	7bdb      	ldrb	r3, [r3, #15]
		if((MASK & STATUS) == 0) {
 23c:	b25b      	sxtb	r3, r3
 23e:	2b00      	cmp	r3, #0
 240:	dbfa      	blt.n	238 <main+0x4c>
	

    /* Replace with your application code */
    while (1) 
    {
		const unsigned int INTFLAG = TC3->COUNT16.INTFLAG.reg;
 242:	4b0d      	ldr	r3, [pc, #52]	; (278 <main+0x8c>)
 244:	7b9b      	ldrb	r3, [r3, #14]
		
		if((INTFLAG & 0x01) == 0){
 246:	07db      	lsls	r3, r3, #31
 248:	d5fb      	bpl.n	242 <main+0x56>
			continue;
		}
		
		PORT->Group[0].OUT.reg ^= PORT_PA17;
 24a:	4a07      	ldr	r2, [pc, #28]	; (268 <main+0x7c>)
 24c:	6911      	ldr	r1, [r2, #16]
 24e:	2380      	movs	r3, #128	; 0x80
 250:	029b      	lsls	r3, r3, #10
 252:	404b      	eors	r3, r1
 254:	6113      	str	r3, [r2, #16]
		TC3->COUNT16.INTFLAG.reg = 0x01;
 256:	4b08      	ldr	r3, [pc, #32]	; (278 <main+0x8c>)
 258:	2201      	movs	r2, #1
 25a:	739a      	strb	r2, [r3, #14]
		TC3->COUNT16.COUNT.reg = 65307;
 25c:	3ae6      	subs	r2, #230	; 0xe6
 25e:	821a      	strh	r2, [r3, #16]
 260:	e7ef      	b.n	242 <main+0x56>
 262:	46c0      	nop			; (mov r8, r8)
 264:	000001dd 	.word	0x000001dd
 268:	41004400 	.word	0x41004400
 26c:	40000400 	.word	0x40000400
 270:	40000c00 	.word	0x40000c00
 274:	0000401b 	.word	0x0000401b
 278:	42002c00 	.word	0x42002c00

0000027c <__libc_init_array>:
 27c:	b570      	push	{r4, r5, r6, lr}
 27e:	4e0d      	ldr	r6, [pc, #52]	; (2b4 <__libc_init_array+0x38>)
 280:	4d0d      	ldr	r5, [pc, #52]	; (2b8 <__libc_init_array+0x3c>)
 282:	2400      	movs	r4, #0
 284:	1bad      	subs	r5, r5, r6
 286:	10ad      	asrs	r5, r5, #2
 288:	d005      	beq.n	296 <__libc_init_array+0x1a>
 28a:	00a3      	lsls	r3, r4, #2
 28c:	58f3      	ldr	r3, [r6, r3]
 28e:	3401      	adds	r4, #1
 290:	4798      	blx	r3
 292:	42a5      	cmp	r5, r4
 294:	d1f9      	bne.n	28a <__libc_init_array+0xe>
 296:	f000 f8c3 	bl	420 <_init>
 29a:	4e08      	ldr	r6, [pc, #32]	; (2bc <__libc_init_array+0x40>)
 29c:	4d08      	ldr	r5, [pc, #32]	; (2c0 <__libc_init_array+0x44>)
 29e:	2400      	movs	r4, #0
 2a0:	1bad      	subs	r5, r5, r6
 2a2:	10ad      	asrs	r5, r5, #2
 2a4:	d005      	beq.n	2b2 <__libc_init_array+0x36>
 2a6:	00a3      	lsls	r3, r4, #2
 2a8:	58f3      	ldr	r3, [r6, r3]
 2aa:	3401      	adds	r4, #1
 2ac:	4798      	blx	r3
 2ae:	42a5      	cmp	r5, r4
 2b0:	d1f9      	bne.n	2a6 <__libc_init_array+0x2a>
 2b2:	bd70      	pop	{r4, r5, r6, pc}
 2b4:	0000042c 	.word	0x0000042c
 2b8:	0000042c 	.word	0x0000042c
 2bc:	0000042c 	.word	0x0000042c
 2c0:	00000434 	.word	0x00000434

000002c4 <register_fini>:
 2c4:	4b03      	ldr	r3, [pc, #12]	; (2d4 <register_fini+0x10>)
 2c6:	b510      	push	{r4, lr}
 2c8:	2b00      	cmp	r3, #0
 2ca:	d002      	beq.n	2d2 <register_fini+0xe>
 2cc:	4802      	ldr	r0, [pc, #8]	; (2d8 <register_fini+0x14>)
 2ce:	f000 f805 	bl	2dc <atexit>
 2d2:	bd10      	pop	{r4, pc}
 2d4:	00000000 	.word	0x00000000
 2d8:	000002ed 	.word	0x000002ed

000002dc <atexit>:
 2dc:	b510      	push	{r4, lr}
 2de:	0001      	movs	r1, r0
 2e0:	2300      	movs	r3, #0
 2e2:	2200      	movs	r2, #0
 2e4:	2000      	movs	r0, #0
 2e6:	f000 f81f 	bl	328 <__register_exitproc>
 2ea:	bd10      	pop	{r4, pc}

000002ec <__libc_fini_array>:
 2ec:	b570      	push	{r4, r5, r6, lr}
 2ee:	4b09      	ldr	r3, [pc, #36]	; (314 <__libc_fini_array+0x28>)
 2f0:	4c09      	ldr	r4, [pc, #36]	; (318 <__libc_fini_array+0x2c>)
 2f2:	1ae4      	subs	r4, r4, r3
 2f4:	10a4      	asrs	r4, r4, #2
 2f6:	d009      	beq.n	30c <__libc_fini_array+0x20>
 2f8:	4a08      	ldr	r2, [pc, #32]	; (31c <__libc_fini_array+0x30>)
 2fa:	18a5      	adds	r5, r4, r2
 2fc:	00ad      	lsls	r5, r5, #2
 2fe:	18ed      	adds	r5, r5, r3
 300:	682b      	ldr	r3, [r5, #0]
 302:	3c01      	subs	r4, #1
 304:	4798      	blx	r3
 306:	3d04      	subs	r5, #4
 308:	2c00      	cmp	r4, #0
 30a:	d1f9      	bne.n	300 <__libc_fini_array+0x14>
 30c:	f000 f892 	bl	434 <_fini>
 310:	bd70      	pop	{r4, r5, r6, pc}
 312:	46c0      	nop			; (mov r8, r8)
 314:	00000440 	.word	0x00000440
 318:	00000444 	.word	0x00000444
 31c:	3fffffff 	.word	0x3fffffff

00000320 <__retarget_lock_acquire_recursive>:
 320:	4770      	bx	lr
 322:	46c0      	nop			; (mov r8, r8)

00000324 <__retarget_lock_release_recursive>:
 324:	4770      	bx	lr
 326:	46c0      	nop			; (mov r8, r8)

00000328 <__register_exitproc>:
 328:	b5f0      	push	{r4, r5, r6, r7, lr}
 32a:	464e      	mov	r6, r9
 32c:	4645      	mov	r5, r8
 32e:	46de      	mov	lr, fp
 330:	4657      	mov	r7, sl
 332:	b5e0      	push	{r5, r6, r7, lr}
 334:	4d36      	ldr	r5, [pc, #216]	; (410 <__register_exitproc+0xe8>)
 336:	b083      	sub	sp, #12
 338:	0006      	movs	r6, r0
 33a:	6828      	ldr	r0, [r5, #0]
 33c:	4698      	mov	r8, r3
 33e:	000f      	movs	r7, r1
 340:	4691      	mov	r9, r2
 342:	f7ff ffed 	bl	320 <__retarget_lock_acquire_recursive>
 346:	4b33      	ldr	r3, [pc, #204]	; (414 <__register_exitproc+0xec>)
 348:	681c      	ldr	r4, [r3, #0]
 34a:	23a4      	movs	r3, #164	; 0xa4
 34c:	005b      	lsls	r3, r3, #1
 34e:	58e0      	ldr	r0, [r4, r3]
 350:	2800      	cmp	r0, #0
 352:	d052      	beq.n	3fa <__register_exitproc+0xd2>
 354:	6843      	ldr	r3, [r0, #4]
 356:	2b1f      	cmp	r3, #31
 358:	dc13      	bgt.n	382 <__register_exitproc+0x5a>
 35a:	1c5a      	adds	r2, r3, #1
 35c:	9201      	str	r2, [sp, #4]
 35e:	2e00      	cmp	r6, #0
 360:	d128      	bne.n	3b4 <__register_exitproc+0x8c>
 362:	9a01      	ldr	r2, [sp, #4]
 364:	3302      	adds	r3, #2
 366:	009b      	lsls	r3, r3, #2
 368:	6042      	str	r2, [r0, #4]
 36a:	501f      	str	r7, [r3, r0]
 36c:	6828      	ldr	r0, [r5, #0]
 36e:	f7ff ffd9 	bl	324 <__retarget_lock_release_recursive>
 372:	2000      	movs	r0, #0
 374:	b003      	add	sp, #12
 376:	bc3c      	pop	{r2, r3, r4, r5}
 378:	4690      	mov	r8, r2
 37a:	4699      	mov	r9, r3
 37c:	46a2      	mov	sl, r4
 37e:	46ab      	mov	fp, r5
 380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 382:	4b25      	ldr	r3, [pc, #148]	; (418 <__register_exitproc+0xf0>)
 384:	2b00      	cmp	r3, #0
 386:	d03d      	beq.n	404 <__register_exitproc+0xdc>
 388:	20c8      	movs	r0, #200	; 0xc8
 38a:	0040      	lsls	r0, r0, #1
 38c:	e000      	b.n	390 <__register_exitproc+0x68>
 38e:	bf00      	nop
 390:	2800      	cmp	r0, #0
 392:	d037      	beq.n	404 <__register_exitproc+0xdc>
 394:	22a4      	movs	r2, #164	; 0xa4
 396:	2300      	movs	r3, #0
 398:	0052      	lsls	r2, r2, #1
 39a:	58a1      	ldr	r1, [r4, r2]
 39c:	6043      	str	r3, [r0, #4]
 39e:	6001      	str	r1, [r0, #0]
 3a0:	50a0      	str	r0, [r4, r2]
 3a2:	3240      	adds	r2, #64	; 0x40
 3a4:	5083      	str	r3, [r0, r2]
 3a6:	3204      	adds	r2, #4
 3a8:	5083      	str	r3, [r0, r2]
 3aa:	3301      	adds	r3, #1
 3ac:	9301      	str	r3, [sp, #4]
 3ae:	2300      	movs	r3, #0
 3b0:	2e00      	cmp	r6, #0
 3b2:	d0d6      	beq.n	362 <__register_exitproc+0x3a>
 3b4:	009a      	lsls	r2, r3, #2
 3b6:	4692      	mov	sl, r2
 3b8:	4482      	add	sl, r0
 3ba:	464a      	mov	r2, r9
 3bc:	2188      	movs	r1, #136	; 0x88
 3be:	4654      	mov	r4, sl
 3c0:	5062      	str	r2, [r4, r1]
 3c2:	22c4      	movs	r2, #196	; 0xc4
 3c4:	0052      	lsls	r2, r2, #1
 3c6:	4691      	mov	r9, r2
 3c8:	4481      	add	r9, r0
 3ca:	464a      	mov	r2, r9
 3cc:	3987      	subs	r1, #135	; 0x87
 3ce:	4099      	lsls	r1, r3
 3d0:	6812      	ldr	r2, [r2, #0]
 3d2:	468b      	mov	fp, r1
 3d4:	430a      	orrs	r2, r1
 3d6:	4694      	mov	ip, r2
 3d8:	464a      	mov	r2, r9
 3da:	4661      	mov	r1, ip
 3dc:	6011      	str	r1, [r2, #0]
 3de:	2284      	movs	r2, #132	; 0x84
 3e0:	4641      	mov	r1, r8
 3e2:	0052      	lsls	r2, r2, #1
 3e4:	50a1      	str	r1, [r4, r2]
 3e6:	2e02      	cmp	r6, #2
 3e8:	d1bb      	bne.n	362 <__register_exitproc+0x3a>
 3ea:	0002      	movs	r2, r0
 3ec:	465c      	mov	r4, fp
 3ee:	328d      	adds	r2, #141	; 0x8d
 3f0:	32ff      	adds	r2, #255	; 0xff
 3f2:	6811      	ldr	r1, [r2, #0]
 3f4:	430c      	orrs	r4, r1
 3f6:	6014      	str	r4, [r2, #0]
 3f8:	e7b3      	b.n	362 <__register_exitproc+0x3a>
 3fa:	0020      	movs	r0, r4
 3fc:	304d      	adds	r0, #77	; 0x4d
 3fe:	30ff      	adds	r0, #255	; 0xff
 400:	50e0      	str	r0, [r4, r3]
 402:	e7a7      	b.n	354 <__register_exitproc+0x2c>
 404:	6828      	ldr	r0, [r5, #0]
 406:	f7ff ff8d 	bl	324 <__retarget_lock_release_recursive>
 40a:	2001      	movs	r0, #1
 40c:	4240      	negs	r0, r0
 40e:	e7b1      	b.n	374 <__register_exitproc+0x4c>
 410:	20000430 	.word	0x20000430
 414:	0000041c 	.word	0x0000041c
 418:	00000000 	.word	0x00000000

0000041c <_global_impure_ptr>:
 41c:	20000008                                ... 

00000420 <_init>:
 420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 422:	46c0      	nop			; (mov r8, r8)
 424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 426:	bc08      	pop	{r3}
 428:	469e      	mov	lr, r3
 42a:	4770      	bx	lr

0000042c <__init_array_start>:
 42c:	000002c5 	.word	0x000002c5

00000430 <__frame_dummy_init_array_entry>:
 430:	000000dd                                ....

00000434 <_fini>:
 434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 436:	46c0      	nop			; (mov r8, r8)
 438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 43a:	bc08      	pop	{r3}
 43c:	469e      	mov	lr, r3
 43e:	4770      	bx	lr

00000440 <__fini_array_start>:
 440:	000000b5 	.word	0x000000b5
